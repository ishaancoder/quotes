{"version":3,"sources":["colors.jsx","button.jsx","container.jsx","index.js"],"names":["allColors","text","author","changeColor","Author","Text","randomNumber","Math","floor","random","length","current","style","color","Button","props","tweet","encodeURIComponent","quote","className","onClick","randomQuote","href","target","rel","Container","ref","container","textREF","id","authorREF","App","useState","setQuote","setAuthor","useRef","containerREF","a","tween","TimelineLite","paused","to","display","x","window","innerWidth","rotateY","play","fetch","response","json","data","content","useEffect","ReactDOM","render","document","querySelector"],"mappings":"8LAAMA,EAAY,CACjB,CACCC,KAAM,cACNC,OAAQ,eACT,CACCD,KAAM,cACNC,OAAQ,eAET,CACCD,KAAM,cACNC,OAAQ,eAET,CACCD,KAAM,cACNC,OAAQ,eAET,CACCD,KAAM,cACNC,OAAQ,gBAIGC,EAAc,SAACC,EAAOC,GAClC,IAAIC,EAAeC,KAAKC,MAAMD,KAAKE,SAAWT,EAAUU,QACxDN,EAAOO,QAAQC,MAAMC,MAAQb,EAAUM,GAAV,OAC7BD,EAAKM,QAAQC,MAAMC,MAAQb,EAAUM,GAAV,M,OCvBfQ,EAAS,SAACC,GACtB,IAAMC,EACL,gFACAC,mBAAmB,MAAQF,EAAMG,MAAQ,OAASH,EAAMb,QACzD,OACC,sBAAKiB,UAAU,mDAAf,UACC,wBAAQC,QAASL,EAAMM,YAAaF,UAAU,4BAA9C,uBAGA,mBAAGG,KAAMN,EAAOO,OAAO,WAAWC,IAAI,wBAAwBL,UAAU,4BAAxE,uBCTUM,EAAY,SAACV,GACzB,OACC,sBAAKW,IAAKX,EAAMY,UAAWR,UAAU,YAArC,UACC,oBAAIO,IAAKX,EAAMa,QAASC,GAAG,OAAOjB,MAAO,CAAEC,MAAO,eAAlD,SACEE,EAAMG,QAER,oBAAIQ,IAAKX,EAAMe,UAAWD,GAAG,SAASjB,MAAO,CAAEC,MAAO,eAAtD,SACEE,EAAMb,aCCL6B,G,MAAM,WAAM,MAEWC,mBAAS,IAFpB,mBAETd,EAFS,KAEFe,EAFE,OAGaD,mBAAS,IAHtB,mBAGT9B,EAHS,KAGDgC,EAHC,KAMXJ,EAAYK,mBACZP,EAAUO,mBACVC,EAAeD,mBAGfd,EAAW,uCAAG,gCAAAgB,EAAA,6DAEfC,EAAQ,IAAIC,IAAa,CAAEC,QAAQ,KACjCC,GAAGL,EAAazB,QAAS,GAAK,CAAE+B,QAAS,OAAQC,GAAIC,OAAOC,WAAYC,QAAS,MAAOC,OAH3E,SAMIC,MAAM,kCANV,cAMbC,EANa,gBAOAA,EAASC,OAPT,OAObC,EAPa,OAUnBlB,EAASkB,EAAKC,SACdlB,EAAUiB,EAAKjD,QAGfC,EAAY2B,EAAWF,GAGvBU,EACEG,GAAGL,EAAazB,QAAS,EAAG,CAAE+B,QAAS,OAAQC,EAAGC,OAAOC,WAAYC,QAAS,MAC9EL,GAAGL,EAAazB,QAAS,GAAK,CAAE+B,QAAS,GAAIC,EAAG,EAAGG,QAAS,IAC5DC,OApBiB,4CAAH,qDA4BjB,OALAM,qBAAU,WAEThC,MACE,IAGF,sBAAKQ,GAAG,YAAR,UACC,cAAC,EAAD,CAAQR,YAAaA,EAAaH,MAAOA,EAAOhB,OAAQA,IACxD,cAAC,EAAD,CAAWA,OAAQA,EAAQgB,MAAOA,EAAOY,UAAWA,EAAWF,QAASA,EAASD,UAAWS,SAK/FkB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.e6f26995.chunk.js","sourcesContent":["const allColors = [\r\n\t{ \r\n\t\ttext: '#FC766AFF  ',\r\n\t\tauthor: '#5B84B1FF  ' },\r\n\t{\r\n\t\ttext: '#5F4B8BFF  ',\r\n\t\tauthor: '#E69A8DFF  '\r\n\t},\r\n\t{\r\n\t\ttext: '#ED2B33FF  ',\r\n\t\tauthor: '#D85A7FFF  '\r\n\t},\r\n\t{\r\n\t\ttext: '#0063B2FF  ',\r\n\t\tauthor: '#9CC3D5FF  '\r\n\t},\r\n\t{\r\n\t\ttext: '#FFA177FF  ',\r\n\t\tauthor: '#F5C7B8FF  '\r\n\t}\r\n]\r\n\r\nexport const changeColor = (Author,Text) => {\r\n\tlet randomNumber = Math.floor(Math.random() * allColors.length); \r\n\tAuthor.current.style.color = allColors[randomNumber][\"author\"] \r\n\tText.current.style.color = allColors[randomNumber][\"text\"] \r\n} \r\n\r\n","import React from 'react';\r\n\r\nexport const Button = (props) => {\r\n\tconst tweet =\r\n\t\t'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=  ' +\r\n\t\tencodeURIComponent('  \"' + props.quote + '  \" ' + props.author);\r\n\treturn (\r\n\t\t<div className=\"d-flex justify-content-center align-items-center\">\r\n\t\t\t<button onClick={props.randomQuote} className=\"btn btn-outline-primary  \">\r\n\t\t\t\tNew Quote\r\n\t\t\t</button>\r\n\t\t\t<a href={tweet} target=\"_blank  \" rel=\"noopener noreferrer  \" className=\"btn btn-outline-primary  \">\r\n\t\t\t\tTweet\r\n\t\t\t</a>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\r\n\r\nexport const Container = (props) => {\r\n\treturn (\r\n\t\t<div ref={props.container} className=\"container\">\r\n\t\t\t<h1 ref={props.textREF} id=\"text\" style={{ color: '#FC766AFF  ' }}>\r\n\t\t\t\t{props.quote}\r\n\t\t\t</h1>\r\n\t\t\t<h2 ref={props.authorREF} id=\"author\" style={{ color: '#5B84B1FF  ' }}>\r\n\t\t\t\t{props.author}\r\n\t\t\t</h2>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { TimelineLite } from 'gsap';\r\n\r\n\r\nimport { changeColor } from './colors.jsx';\r\nimport { Button } from './button.jsx';\r\nimport { Container } from './container.jsx';\r\nimport './style.scss';\r\n\r\nconst App = () => {\r\n\t// Setting the State of quote and author which can be changed by getQuote and getAuthor\r\n\tconst [ quote, setQuote ] = useState('');\r\n\tconst [ author, setAuthor ] = useState('');\r\n\r\n\t// Using Refs to change DOM for changing color and animation\r\n\tconst authorREF = useRef();\r\n\tconst textREF = useRef();\r\n\tconst containerREF = useRef();\r\n\r\n\t// QUOTE API\r\n\tconst randomQuote = async () => {\r\n\t\t// Animation\r\n\t\tlet tween = new TimelineLite({ paused: true });\r\n\t\ttween.to(containerREF.current, 0.5, { display: 'none', x: -window.innerWidth, rotateY: 180 }).play();\r\n\r\n\t\t// API\r\n\t\tconst response = await fetch('https://api.quotable.io/random');\r\n\t\tconst data = await response.json();\r\n\r\n\t\t// Setting the data given from API to state or react storage place\r\n\t\tsetQuote(data.content);\r\n\t\tsetAuthor(data.author);\r\n\r\n\t\t// Changing color\r\n\t\tchangeColor(authorREF, textREF);\r\n\r\n\t\t// Ending Animation\r\n\t\ttween\r\n\t\t\t.to(containerREF.current, 0, { display: 'none', x: window.innerWidth, rotateY: 180 })\r\n\t\t\t.to(containerREF.current, 0.5, { display: '', x: 0, rotateY: 0 })\r\n\t\t\t.play();\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\t// Every time the browser rerenders,it will grab a new randomQuote\r\n\t\trandomQuote();\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div id=\"quote-box\">\r\n\t\t\t<Button randomQuote={randomQuote} quote={quote} author={author} />\r\n\t\t\t<Container author={author} quote={quote} authorREF={authorREF} textREF={textREF} container={containerREF} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}