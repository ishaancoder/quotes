{"version":3,"sources":["index.js"],"names":["localStorage","quote","author","App","colors","text","wordChecker","word","split","length","useState","setQuote","setAuthor","setStatetolocalStorage","randomQuote","a","document","querySelector","classList","remove","fetch","response","json","data","content","console","log","add","randomNumber","Math","floor","random","style","color","useEffect","tweet","encodeURIComponent","id","className","onClick","href","target","rel","ReactDOM","render"],"mappings":"oMAGKA,aAAaC,QACdD,aAAaC,MAAU,MAEtBD,aAAaE,SACdF,aAAaE,OAAW,MAG5B,IAAMC,EAAM,WACV,IAAMC,EAAS,CACb,CAACC,KAAQ,cAAcH,OAAU,eACjC,CACIG,KAAQ,cACRH,OAAU,eAEd,CACIG,KAAQ,cACRH,OAAU,eAEd,CACIG,KAAQ,cACRH,OAAU,eAEd,CACIG,KAAQ,cACRH,OAAU,gBAIRI,EAAc,SAACC,GACjB,OAAOA,EAAKC,MAAM,KAAKC,QAtBb,EA2BWC,mBAAS,IA3BpB,mBA2BPT,EA3BO,KA2BDU,EA3BC,OA4BaD,mBAAS,IA5BtB,mBA4BPR,EA5BO,KA4BAU,EA5BA,KAiCRC,EAAyB,WAC3BF,EAASX,aAAaC,OACtBW,EAAUZ,aAAaE,SAIrBY,EAAW,uCAAG,gCAAAC,EAAA,6DAEAC,SAASC,cAAc,cAC7BC,UAAUC,OAAO,oBAAsB,sBAAwB,iBAHzD,SAIOC,MAAM,kCAJb,cAIVC,EAJU,gBAKGA,EAASC,OALZ,OAKVC,EALU,OAMhBvB,aAAaC,MAAQsB,EAAKC,QAC1BxB,aAAaE,OAASqB,EAAKrB,OAC3BW,IACAY,QAAQC,IAAIV,SAASC,cAAc,YACnCD,SAASC,cAAc,cAAcC,UAAUS,IAAM,oBAAsB,sBAAwB,mBAC/FC,EAAeC,KAAKC,MAAMD,KAAKE,SAAW3B,EAAOK,QACrDO,SAASC,cAAc,WAAWe,MAAMC,MAAQ7B,EAAOwB,GAAP,OAChDZ,SAASC,cAAc,SAASe,MAAMC,MAAQ7B,EAAOwB,GAAP,KAb9B,4CAAH,qDAkBjBM,qBAAU,WAGF5B,EAAYN,aAAaC,OAAS,IAAMK,EAAYN,aAAaE,QAAU,KAAOF,aAAaC,QAAUD,aAAaE,OAC1HY,IAGAD,MAGD,IAIH,IAAMsB,EAAU,gFAAkFC,mBAAmB,MAAQnC,EAAQ,OAASC,GAE9I,OACI,sBAAKmC,GAAK,cAAV,UAEI,sBAAMC,UAAY,sDAAlB,UACI,wBAAQC,QAASzB,EAAawB,UAAY,4BAA1C,uBACA,mBAAGE,KAAML,EAAOM,OAAS,WAAWC,IAAM,wBAAwBJ,UAAY,4BAA9E,sBAEJ,sBAAKA,UAAY,YAAjB,UACI,oBAAMD,GAAK,OAAOL,MAAO,CAACC,MAAS,eAAnC,SAAoDhC,IACpD,oBAAKoC,GAAK,SAASL,MAAO,CAACC,MAAS,eAApC,SAAqD/B,WAYrEyC,IAASC,OAAO,cAACzC,EAAD,IAASa,SAASC,cAAc,Y","file":"static/js/main.02a64a0d.chunk.js","sourcesContent":["import React,{ useState,useEffect } from 'react';  \r\nimport ReactDOM from 'react-dom';  \r\nimport   \"./style.scss\"  \r\nif (!localStorage.quote) {  \r\n    localStorage.quote =   \"  \";  \r\n}  \r\nif (!localStorage.author) {  \r\n    localStorage.author =   \"  \";  \r\n}  \r\n\r\nconst App = () => {   \r\n  const colors = [\r\n    {text:   \"#FC766AFF  \",author:   \"#5B84B1FF  \"},\r\n    {  \r\n        text:   \"#5F4B8BFF  \",  \r\n        author:   \"#E69A8DFF  \"  \r\n    },\r\n    {  \r\n        text:   \"#ED2B33FF  \",  \r\n        author:   \"#D85A7FFF  \"  \r\n    },\r\n    {  \r\n        text:   \"#0063B2FF  \",  \r\n        author:   \"#9CC3D5FF  \"  \r\n    },\r\n    {  \r\n        text:   \"#FFA177FF  \",  \r\n        author:   \"#F5C7B8FF  \"  \r\n    }]  \r\n  \r\n    \r\n    const wordChecker = (word) => {  \r\n        return word.split(' ').length;  \r\n  \r\n    }  \r\n     \r\n    // Setting the State of text and author which can be changed by getQuote and getAutghor  \r\n    const [quote,setQuote] = useState('')  \r\n    const [author,setAuthor] = useState('')  \r\n  \r\n  \r\n  \r\n    // This changes State to the Api Data  \r\n    const setStatetolocalStorage = () => {  \r\n        setQuote(localStorage.quote)  \r\n        setAuthor(localStorage.author)  \r\n    }  \r\n  \r\n    // QUOTE API   \r\n    const randomQuote = async () => {  \r\n        // document.querySelector(  \".container  \").classList.remove(  \"animate__animated  \",  \"animate__bounceInUp  \",  \"animate__slow  \")  \r\n        let container = document.querySelector(\".container\")\r\n        container.classList.remove(\"animate__animated\",  \"animate__bounceInUp\",  \"animate__slow\")\r\n        const response = await fetch('https://api.quotable.io/random');  \r\n        const data = await response.json();  \r\n        localStorage.quote = data.content  \r\n        localStorage.author = data.author;  \r\n        setStatetolocalStorage();  \r\n        console.log(document.querySelector(\"#author\"))\r\n        document.querySelector(\".container\").classList.add(  \"animate__animated\",  \"animate__bounceInUp\",  \"animate__slower\")  \r\n        let randomNumber = Math.floor(Math.random() * colors.length);  \r\n        document.querySelector(\"#author\").style.color = colors[randomNumber][\"author\"]  \r\n        document.querySelector(\"#text\").style.color = colors[randomNumber][\"text\"]  \r\n  \r\n         \r\n    };  \r\n  \r\n    useEffect(() => {    \r\n  \r\n  \r\n        if (wordChecker(localStorage.quote) > 20 || wordChecker(localStorage.author) > 20 || !localStorage.quote || !localStorage.author) {  \r\n        randomQuote();  \r\n          \r\n        } else {  \r\n        setStatetolocalStorage();  \r\n        }  \r\n        // eslint-disable-next-line react-hooks/exhaustive-deps  \r\n    }, []);  \r\n  \r\n     \r\n  \r\n    const tweet =   \"https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=  \" + encodeURIComponent('  \"' + quote + '  \" ' + author)  \r\n  \r\n    return (  \r\n        <div id=  \"quote-box  \">  \r\n    \r\n            <div  className=  \"d-flex justify-content-center align-items-center   \">  \r\n                <button onClick={randomQuote} className=  \"btn btn-outline-primary  \">New Quote</button>  \r\n                <a href={tweet} target=  \"_blank  \" rel=  \"noopener noreferrer  \" className=  \"btn btn-outline-primary  \">Tweet</a>  \r\n            </div>  \r\n            <div className=  \"container\">  \r\n                <h1   id = \"text\" style={{color:   \"#FC766AFF  \"}}>{quote}</h1>  \r\n                <h2  id = \"author\" style={{color:   \"#5B84B1FF  \"}}>{author}</h2>  \r\n            </div>  \r\n        </div>  \r\n    );  \r\n  \r\n}  \r\n  \r\n\r\n  \r\n  \r\n  \r\n  \r\nReactDOM.render(<App />, document.querySelector('#root'));  "],"sourceRoot":""}